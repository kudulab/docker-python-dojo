#!/bin/bash

set -e
if [[ ! -f ./releaser ]];then
  wget --quiet http://http.archive.ai-traders.com/releaser/0.4.0/releaser
fi
source ./releaser
if [[ ! -f ./docker-ops ]];then
  wget --quiet http://http.archive.ai-traders.com/docker-ops/0.2.1/docker-ops
fi
source ./docker-ops
# This goes as last in order to let end user variables override default values
releaser_init

image_name="docker-registry.ai-traders.com/python2-ide"
# since this task may happen directly on workstation/go-agent,
# let's name the image differently to other temp images
tmp_image="${image_name}:temp"
image_dir="./image"
imagerc_filename="imagerc"

command="$1"
case "${command}" in
  bump)
    bump_changelog_and_oversion "$2"
    exit $?
    ;;
  verify_version)
      verify_version_no_version_file
      exit $?
      ;;
  build_cfg)
      # builds the ide configs image
      image_name_no_registry="${image_name/docker-registry.ai-traders.com\//}"
      production_image_tag="$(get_next_version)"
      cd "${image_dir}"
      docker build -f Dockerfile_ide_configs -t "${tmp_image}" --build-arg this_image_name=${image_name_no_registry} --build-arg this_image_tag=${production_image_tag} .
      exit $?
      ;;
  test_cfg)
      echo "Testing image: ${tmp_image}"
      # do not use the production ENTRYPOINT
      echo "IDE_DOCKER_IMAGE=\"${tmp_image}\"" > ./Idefile.to_be_tested_configs
      echo "IDE_DOCKER_OPTIONS=\"--entrypoint=/bin/bash\"" >> ./Idefile.to_be_tested_configs
      echo "IDE_IDENTITY=\"$(pwd)/test/integration/identities/full\"" >> ./Idefile.to_be_tested_configs
      echo "IDE_WORK=$(pwd)/test/integration/configs/test_ide_work" >> Idefile.to_be_tested_configs
      time bats "$(pwd)/test/integration/configs/bats"
      exit $?
      ;;
  build)
      ./tasks build_cfg
      # pwd is the ${image_dir}
      docker_build "./image" "${imagerc_filename}" "${image_name}" "$2"
      exit $?
      ;;
  itest)
      source "${image_dir}/${imagerc_filename}"
      if [[ -z "AIT_DOCKER_IMAGE_NAME" ]]; then
        echo "fail! AIT_DOCKER_IMAGE_NAME not set"
        return 1
      fi
      if [[ -z "AIT_DOCKER_IMAGE_TAG" ]]; then
        echo "fail! AIT_DOCKER_IMAGE_TAG not set"
        return 1
      fi
      echo "Testing image: ${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}"
      # use the production ENTRYPOINT
      echo "IDE_DOCKER_IMAGE=\"${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}\"" > ./Idefile.to_be_tested
      echo "IDE_IDENTITY=\"$(pwd)/test/integration/identities/full\"" >> ./Idefile.to_be_tested
      echo "IDE_WORK=$(pwd)/test/integration/end_user/test_ide_work" >> Idefile.to_be_tested
      time bats "$(pwd)/test/integration/end_user/bats"
      exit $?
      ;;
  example)
      last_tag=$(get_last_git_tagged_version)
      echo "IDE_DOCKER_IMAGE=\"${image_name}:${last_tag}\"" > ./Idefile.example
      echo "IDE_IDENTITY=\"$(pwd)/test/integration/identities/full\"" >> ./Idefile.example
      echo "IDE_WORK=$(pwd)/test/integration/end_user/test_ide_work" >> Idefile.example
      exit $?
      ;;
  release)
      verify_version_no_version_file
      git_tag_from_oversion
      exit $?
      ;;
  publish)
      source_imagerc "${image_dir}"  "${imagerc_filename}"
      production_image_tag="$(get_next_version)"
      docker_push "${AIT_DOCKER_IMAGE_NAME}" "${AIT_DOCKER_IMAGE_TAG}" "${production_image_tag}"
      exit $?
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e

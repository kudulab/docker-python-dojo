#!/bin/bash

set -e
if [[ ! -f ./releaser ]]; then
  wget --quiet http://http.archive.ai-traders.com/releaser/1.1.0/releaser || { echo "Cannot download releaser, ignoring."; }
fi
if [[ -f ./releaser ]]; then
  source ./releaser
fi
if [[ ! -f ./docker-ops ]]; then
  wget --quiet http://http.archive.ai-traders.com/docker-ops/0.3.3/docker-ops || { echo "Cannot download docker-ops, ignoring."; }
fi
if [[ -f ./docker-ops ]]; then
  source ./docker-ops
fi

image_name="python2-ide"
image_dir="./image"
imagerc_basename="imagerc"
image_registry="docker-registry.ai-traders.com"

python27_base="2.7.14"
python35_base="3.5.4"

function build {
  prefix=$1
  base_tag=$2
  sed "s/BASE_PY_VERSION/$base_tag/g" $image_dir/Dockerfile.tmpl > $image_dir/Dockerfile.$prefix
  image_tag=$prefix-$(git rev-parse HEAD)
  ( set -x; cd "${image_dir}"; docker build -f Dockerfile.$prefix -t "${image_name}:${image_tag}" .; )
  docker_ops::create_imagerc "${image_dir}" "${imagerc_basename}.${prefix}" "${image_name}" "${image_tag}" "${image_registry}"
  docker_ops::push_tmp "${image_name}" "${image_tag}" "${image_registry}"
}

function itest {
  prefix=$1
  set -e
  docker_ops::ensure_temp_image "${image_dir}" "${imagerc_basename}.${prefix}"
  echo "Testing image: ${AIT_DOCKER_IMAGE_URL}"
  echo "DOJO_DOCKER_IMAGE=\"${AIT_DOCKER_IMAGE_URL}\"" > ./Dojofile.to_be_tested
  echo "DOJO_IDENTITY_OUTER=\"$(pwd)/test/integration/identities/full\"" >> ./Dojofile.to_be_tested
  echo "DOJO_WORK_OUTER=$(pwd)/test/integration/end_user/test_dojo_work" >> ./Dojofile.to_be_tested
  time bats "$(pwd)/test/integration/end_user/bats"
}

function publish {
  prefix=$1
  production_image_tag=$prefix-$(get_last_version_from_changelog "${changelog_file}")
  docker_ops::push_production "${image_dir}" "${imagerc_basename}.${prefix}" "${image_name}" "${production_image_tag}" "${image_registry}"
}

command="$1"
case "${command}" in
  set_version)
      if [[ -n "$2" ]]; then
        next_version="$2"
      else
        version=$(releaser::get_last_version_from_whole_changelog "${changelog_file}")
        next_version=$(releaser::bump_patch_version "${version}")
      fi
      releaser::set_version_in_changelog "${changelog_file}" "${next_version}"
      exit $?
      ;;
  build_py27)
      build "py27" $python27_base
      exit $?
      ;;
  itest_py27)
      itest "py27"
      exit $?
      ;;
  build_py35)
      build "py35" $python35_base
      exit $?
      ;;
  itest_py35)
      itest "py35"
      exit $?
      ;;
  publish_py27)
      publish "py27"
      exit $?
      ;;
  publish_py35)
      publish "py35"
      exit $?
      ;;
  example)
      docker_ops::source_imagerc "${image_dir}"  "${imagerc_basename}.py35"
      echo "Testing image: ${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}"
      echo "DOJO_DOCKER_IMAGE=\"${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}\"" > ./Dojofile.example
      echo "DOJO_IDENTITY_OUTER=\"$(pwd)/test/integration/identities/full\"" >> ./Dojofile.example
      echo "DOJO_WORK_OUTER=$(pwd)/test/integration/end_user/test_dojo_work" >> ./Dojofile.example
      dojo -c ./Dojofile.example
      ;;
  code_release)
      ./tasks verify_version
      version=$(releaser::get_last_version_from_whole_changelog "${changelog_file}")
      git tag "${version}" && git push origin "${version}"
      exit $?
      ;;
  verify_version)
      releaser::verify_changelog_version
      exit $?
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e

#!/bin/bash

set -e
if [[ ! -f ./releaser ]];then
  wget --quiet http://http.archive.ai-traders.com/releaser/1.0.3/releaser
fi
source ./releaser
if [[ ! -f ./docker-ops ]];then
  wget --quiet http://http.archive.ai-traders.com/docker-ops/0.2.1/docker-ops
fi
source ./docker-ops
# This goes as last in order to let end user variables override default values
releaser_init

python27_base="2.7.14"
python35_base="3.5.4"

image_name="docker-registry.ai-traders.com/python2-ide"
image_name_no_registry="python2-ide"
image_dir="./image"
imagerc_basename="imagerc"

function build {
  prefix=$1
  base_tag=$2
  imagerc_filename="$imagerc_basename.$prefix"
  sed "s/BASE_PY_VERSION/$base_tag/g" $image_dir/Dockerfile.tmpl > $image_dir/Dockerfile.$prefix
  image_tag=$prefix-$(git rev-parse HEAD)
  production_image_tag=$prefix-$(get_next_oversion)
  docker_build_options="--build-arg this_image_name=${image_name_no_registry} --build-arg this_image_tag=${production_image_tag} -f Dockerfile.$prefix"
  docker_build "./image" "${imagerc_filename}" "${image_name}" "${image_tag}" $docker_build_options
}

function itest {
  prefix=$1
  imagerc_filename="$imagerc_basename.$prefix"
  set -e

  source "${image_dir}/${imagerc_filename}"
  if [[ -z "AIT_DOCKER_IMAGE_NAME" ]]; then
    echo "fail! AIT_DOCKER_IMAGE_NAME not set"
    return 1
  fi
  if [[ -z "AIT_DOCKER_IMAGE_TAG" ]]; then
    echo "fail! AIT_DOCKER_IMAGE_TAG not set"
    return 1
  fi
  tmp_image="${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}"

  echo "Testing image configs: ${tmp_image}"
  # do not use the production ENTRYPOINT
  echo "IDE_DOCKER_IMAGE=\"${tmp_image}\"" > ./Idefile.to_be_tested_configs
  echo "IDE_DOCKER_OPTIONS=\"--entrypoint=/bin/bash\"" >> ./Idefile.to_be_tested_configs
  echo "IDE_IDENTITY=\"$(pwd)/test/integration/identities/full\"" >> ./Idefile.to_be_tested_configs
  echo "IDE_WORK=$(pwd)/test/integration/configs/test_ide_work" >> Idefile.to_be_tested_configs
  time bats "$(pwd)/test/integration/configs/bats"

  echo "Testing image: ${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}"
  # use the production ENTRYPOINT
  echo "IDE_DOCKER_IMAGE=\"${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}\"" > ./Idefile.to_be_tested
  echo "IDE_IDENTITY=\"$(pwd)/test/integration/identities/full\"" >> ./Idefile.to_be_tested
  echo "IDE_WORK=$(pwd)/test/integration/end_user/test_ide_work" >> Idefile.to_be_tested
  time bats "$(pwd)/test/integration/end_user/bats"
  exit $?
}

function publish {
  prefix=$1
  imagerc_filename="$imagerc_basename.$prefix"
  source_imagerc "${image_dir}"  "${imagerc_filename}"
  production_image_tag=$prefix-$(get_last_version_from_changelog "${changelog_file}")
  docker_push "${AIT_DOCKER_IMAGE_NAME}" "${AIT_DOCKER_IMAGE_TAG}" "${production_image_tag}"
}

command="$1"
case "${command}" in
  bump)
    bump_changelog_and_oversion "$2"
    exit $?
    ;;
  build_py27)
    build "py27" $python27_base
    exit $?
    ;;
  itest_py27)
    itest "py27"
    exit $?
    ;;
  build_py35)
    build "py35" $python35_base
    exit $?
    ;;
  itest_py35)
    itest "py35"
    exit $?
    ;;
  publish_py27)
    publish "py27"
    exit $?
    ;;
  publish_py35)
    publish "py35"
    exit $?
    ;;
  code_release)
    # conditional release
    git fetch origin
    version_from_changelog=$(get_last_version_from_changelog "${changelog_file}")
    validate_version_is_semver "${version_from_changelog}"
    next_version="$(bump_patch_version ${version_from_changelog})"
    verify_version_for_release
    git tag "${version_from_changelog}" && git push origin "${version_from_changelog}"
    # set it in Consul
    set_next_oversion "${next_version}"
    exit $?
    ;;
  verify_version)
    git fetch origin
    verify_version_in_changelog_matches_in_oversion
    verify_version_not_released_before
    exit $?
    ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
